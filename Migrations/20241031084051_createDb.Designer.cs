// <auto-generated />
using System;
using FilmManagerSqlServe_MongoDb.SqlServe.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmManager.Migrations
{
    [DbContext(typeof(FilmManagerContext))]
    [Migration("20241031084051_createDb")]
    partial class createDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Category_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CategoryId"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category_description");

                    b.Property<string>("CategoryImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category_img");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category_name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Film", b =>
                {
                    b.Property<long>("FilmId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Film_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FilmId"));

                    b.Property<long>("FilmCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("Film_category_id");

                    b.Property<string>("FilmDirector")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Film_director");

                    b.Property<string>("FilmName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Film_name");

                    b.Property<DateOnly>("FilmRelaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Film_relase_date");

                    b.Property<string>("FilmUrlImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Film_UrlImg");

                    b.HasKey("FilmId");

                    b.HasIndex("FilmCategoryId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.FilmsTagsPivot", b =>
                {
                    b.Property<long>("FilmTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("Film_Tag_id");

                    b.Property<long>("FilmTagFilmId")
                        .HasColumnType("bigint")
                        .HasColumnName("Film_Tag_Film_id");

                    b.Property<long>("FilmTagTagId")
                        .HasColumnType("bigint")
                        .HasColumnName("Film_Tag_Tag_id");

                    b.HasKey("FilmTagId");

                    b.HasIndex("FilmTagFilmId");

                    b.HasIndex("FilmTagTagId");

                    b.ToTable("Films_Tags_Pivot", (string)null);
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Log", b =>
                {
                    b.Property<string>("LogId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Log_id");

                    b.Property<DateTime>("LogDateError")
                        .HasColumnType("datetime2")
                        .HasColumnName("Log_dateError");

                    b.Property<string>("LogErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Log_errorMessage");

                    b.HasKey("LogId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Tag_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TagId"));

                    b.Property<string>("TagDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tag_description");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Tag_name");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Film", b =>
                {
                    b.HasOne("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Category", "FilmCategory")
                        .WithMany("Films")
                        .HasForeignKey("FilmCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Films_Categories");

                    b.Navigation("FilmCategory");
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.FilmsTagsPivot", b =>
                {
                    b.HasOne("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Film", "FilmTagFilm")
                        .WithMany("FilmsTagsPivots")
                        .HasForeignKey("FilmTagFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Films_Tags_Pivot_Films_Film_Tag_id");

                    b.HasOne("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Tag", "FilmTagTag")
                        .WithMany("FilmsTagsPivots")
                        .HasForeignKey("FilmTagTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Films_Tags_Pivot_Tags_Film_Tag_id");

                    b.Navigation("FilmTagFilm");

                    b.Navigation("FilmTagTag");
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Category", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Film", b =>
                {
                    b.Navigation("FilmsTagsPivots");
                });

            modelBuilder.Entity("FilmManagerSqlServe_MongoDb.SqlServe.EntitySqlServe.Tag", b =>
                {
                    b.Navigation("FilmsTagsPivots");
                });
#pragma warning restore 612, 618
        }
    }
}
